name: Check Iot

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  iot-test:
    environment: IoT Environment

    runs-on: macos-15

    permissions:
      id-token: write
      contents: read

    env:
      THING_NAME: my-gh-test-thing
      ROLE_NAME: my-gh-test-role

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-west-2

#      - name: Install Dependencies
#        run: |
#          brew install coreutils

      - name: Create IoT thing
        id: create-iot-thing
        run: |
          aws iot create-thing --thing-name "$THING_NAME" > iot-thing.json
          echo "AWS_IOT_CORE_THING_NAME=$THING_NAME" >> $GITHUB_ENV

      - name: Create IAM role
        id: create-iam-role
        run: |
          cat > iot-assume-policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "credentials.iot.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF
          aws iam create-role --role-name "$ROLE_NAME" --assume-role-policy-document 'file://iot-assume-policy.json' > iam-role.json
          echo "ROLE_CREATED=yes" >> $GITHUB_ENV

      - name: Test
        run: |
          echo "Hi! Iot thing name: $THING_NAME"

      - name: Cleanup IAM role
        if: ${{ env.ROLE_CREATED != '' }}
        run: |
          aws iam delete-role --role-name "$ROLE_NAME"

      - name: Cleanup IoT thing
        if: ${{ env.AWS_IOT_CORE_THING_NAME != '' }}
        run: |
          aws iot delete-thing --thing-name "$THING_NAME"

#      - name: Build
#        run: |
#          mkdir build
#          cd build
#          cmake .. -DUSE_MBEDTLS=ON -DUSE_OPENSSL=OFF -DIOT_CORE_ENABLE_CREDENTIALS=ON
#          make -j$(sysctl -n hw.ncpu)
#        shell: bash
#
#      - name: Check samples
#        working-directory: ./build
#        env:
#          AWS_IOT_CORE_CREDENTIAL_ENDPOINT: ${{ secrets.AWS_IOT_CORE_CREDENTIAL_ENDPOINT }}
#          AWS_IOT_CORE_ROLE_ALIAS: ${{ secrets.AWS_IOT_CORE_ROLE_ALIAS }}
#          AWS_IOT_CORE_THING_NAME: ${{ secrets.AWS_IOT_CORE_THING_NAME }}
#          AWS_IOT_CORE_PRIVATE_KEY_CONTENTS: ${{ secrets.AWS_IOT_CORE_PRIVATE_KEY }}
#          AWS_IOT_CORE_CERT_CONTENTS: ${{ secrets.AWS_IOT_CORE_CERT }}
#          AWS_IOT_CORE_PRIVATE_KEY: ./private.pem.key
#          AWS_IOT_CORE_CERT: ./certificate.pem.crt
#
#        run: |
#          echo "$AWS_IOT_CORE_PRIVATE_KEY_CONTENTS" > "$AWS_IOT_CORE_PRIVATE_KEY"
#          echo "$AWS_IOT_CORE_CERT_CONTENTS" > "$AWS_IOT_CORE_CERT"
#
#          gtimeout --signal=SIGINT --kill-after=30s 15s ./samples/kvsWebRTCClientMaster "$CHANNEL_NAME"
#
#          echo "Exited with: $?";
#        shell: bash